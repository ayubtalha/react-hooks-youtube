{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport youtube from \"../apis/youtube\";\nconst KEY = process.env.REACT_APP_API_KEY;\n\nconst useVideos = defaultSearchTerm => {\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    search(defaultSearchTerm);\n  }, [defaultSearchTerm]); // only one time renders\n\n  const search = async term => {\n    const response = await youtube.get(\"/search\", {\n      params: {\n        q: term,\n        part: \"snippet\",\n        maxResults: 5,\n        type: \"video\",\n        key: KEY\n      }\n    });\n    setVideos(response.data.items);\n  };\n\n  return [videos, search];\n};\n\nexport default useVideos;","map":{"version":3,"sources":["C:/Users/Fahad Khan/workspace/videos-hooks/src/hooks/useVideos.js"],"names":["useState","useEffect","youtube","KEY","process","env","REACT_APP_API_KEY","useVideos","defaultSearchTerm","videos","setVideos","search","term","response","get","params","q","part","maxResults","type","key","data","items"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAxB;;AAEA,MAAMC,SAAS,GAAIC,iBAAD,IAAuB;AACvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,MAAM,CAACH,iBAAD,CAAN;AACD,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT,CAHuC,CAKd;;AAEzB,QAAMG,MAAM,GAAG,MAAOC,IAAP,IAAgB;AAC7B,UAAMC,QAAQ,GAAG,MAAMX,OAAO,CAACY,GAAR,CAAY,SAAZ,EAAuB;AAC5CC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAEJ,IADG;AAENK,QAAAA,IAAI,EAAE,SAFA;AAGNC,QAAAA,UAAU,EAAE,CAHN;AAINC,QAAAA,IAAI,EAAE,OAJA;AAKNC,QAAAA,GAAG,EAAEjB;AALC;AADoC,KAAvB,CAAvB;AAUAO,IAAAA,SAAS,CAACG,QAAQ,CAACQ,IAAT,CAAcC,KAAf,CAAT;AACD,GAZD;;AAcA,SAAO,CAACb,MAAD,EAASE,MAAT,CAAP;AACD,CAtBD;;AAwBA,eAAeJ,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport youtube from \"../apis/youtube\";\r\n\r\nconst KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst useVideos = (defaultSearchTerm) => {\r\n  const [videos, setVideos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    search(defaultSearchTerm);\r\n  }, [defaultSearchTerm]); // only one time renders\r\n\r\n  const search = async (term) => {\r\n    const response = await youtube.get(\"/search\", {\r\n      params: {\r\n        q: term,\r\n        part: \"snippet\",\r\n        maxResults: 5,\r\n        type: \"video\",\r\n        key: KEY,\r\n      },\r\n    });\r\n\r\n    setVideos(response.data.items);\r\n  };\r\n\r\n  return [videos, search];\r\n};\r\n\r\nexport default useVideos;\r\n"]},"metadata":{},"sourceType":"module"}